"""This interface provides an abstraction (ports/adapter model) to insulate internal code from external API changes.

Any module interacting with the Mastodon API post-oauth (for data collection) should do so strictly through this layer"""

import logging

import mastodon.errors
from mastodon import MastodonAPIError, Mastodon

from feed_amalgamator.helpers.custom_exceptions import (
    MastodonConnError,
    InvalidCredentialsError,
    ServiceUnavailableError
)


class MastodonDataInterface:
    """Adapter Class for responsible for handling API calls for data processing AFTER Oauth.
    All calls to the API after oauth should go through this layer to insulate code from third party
    libraries.
    """

    def __init__(self, logger: logging.Logger):
        """We pass in a logger instead of creating a new one
        As we want logs to be logged to the program calling the interface
        rather than have separate logs for the interface layer specifically"""
        self.logger = logger
        """This is the client to perform actions on the user's behalf"""
        self.user_client = None
        """Hard coded required scopes for the app to work"""
        self.REQUIRED_SCOPES = ["read", "write", "push"]

    def start_user_api_client(self, user_domain: str, user_access_token: str):
        """
        Function to start a new client using the authorization code provided by the user.
        Does a sanity check to see if the user api access token is valid

        :param user_domain: User's account domain (eg. mstdn.social, tomorrow.io).
        :param user_access_token: The user access token generated from the auth procedure
        :return: None, but side effect of setting user_client
        """
        try:
            self.logger.info("Starting user api client")
            client = Mastodon(access_token=user_access_token, api_base_url=user_domain)
            # Getting 1 post from timeline to sanity check if the user access token was valid
            client.timeline(timeline="home", limit=1)
            self.user_client = client
            self.logger.info("Successfully started user API client")
        except mastodon.errors.MastodonUnauthorizedError:
            raise InvalidCredentialsError({
                "redirect_page": "feed/add_server.html",
                "message": "Invalid access token"
            })
        except (ConnectionError, MastodonAPIError) as err:
            conn_error_msg = "Encountered error {e} in start_user_api_client".format(e=err)
            self.logger.error(conn_error_msg)
            raise MastodonConnError(conn_error_msg)

    # === Functions to get data from here on out =====
    def get_timeline_data(self, timeline_name: str, num_posts_to_get: int, num_tries=3) -> list[dict]:
        """
        Extracts data from the wanted timeline

        :param timeline_name: Name of the timeline to get data from
        :param num_posts_to_get: Number of posts to obtain from the timeline
        :param num_tries: Number of tries to get the data before giving up
        :return: List of dictionaries containing the obtained data
        """
        assert self.user_client is not None, "User client has not been started"
        for i in range(num_tries):
            try:
                self.logger.info("Starting to get timeline data")
                timeline = self.user_client.timeline(timeline=timeline_name, limit=num_posts_to_get)
                standardized_timeline = self._standardize_api_objects(timeline)
                self.logger.info("Successfully obtained timeline data")
                return standardized_timeline
            except (ConnectionError, MastodonAPIError) as err:
                self.logger.error("Encountered error {e} in start_user_api_client." "Retrying".format(e=err))
        raise ServiceUnavailableError({
            "redirect_page": "feed/home.html",
            "message": "Failed to get timeline data after trying {n} times".format(n=num_tries)})

    def _standardize_api_objects(self, raw_timeline: mastodon.utility.AttribAccessList) -> list[dict]:
        """
        Standardizes third party objects into a list to reduce coupling with third party APIs

        :param raw_timeline: Raw timeline object generated by the third party API of type mastodon.utility
        :return: Standardized list of dictionaries of information contained in the API object
        """
        # Simple conversion for now, but will come in very handy if there is a breaking API change
        return [dict(item) for item in raw_timeline]
